/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mvcdemo;

import java.awt.*;
import java.awt.event.*;

/**
 *
 * @author user
 */
public class CircleView extends javax.swing.JPanel {

    private CircleModel model;

    /**
     * Creates new form CircleView
     */
    public CircleView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    /**
     * @return the model
     */
    public CircleModel getModel() {
        return model;
    }

    /**
     * @param model the model to set
     */
    public void setModel(CircleModel newModel) {
        model = newModel;

        if (model != null) // Register the view as listener for the model
        {
            model.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    repaint();
                }
            });
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        if (model != null) {
            super.paintComponent(g);
            g.setColor(model.getColor());

            int xCenter = getWidth() / 2;
            int yCenter = getHeight() / 2;
            int radius = (int) model.getRadius();

            if (model.isFilled()) {
                g.fillOval(xCenter - radius, yCenter - radius,
                        2 * radius, 2 * radius);
            } else {
                g.drawOval(xCenter - radius, yCenter - radius,
                        2 * radius, 2 * radius);
            }
        }
    }
}
